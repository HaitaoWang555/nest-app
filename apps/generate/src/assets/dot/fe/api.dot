{{
var className = it.fn.camel(it.tableName, true);
var package = it.package ? it.package + '/' + it.tableName : it.tableName;
var isTree = Boolean(it.isTree);
var formColumns = it.columns.filter(i => i.isQuery).map(i => i.columnName);
}}
import type { ResponseBodyType, PageInfo, PageParams } from '@/types/api'
import request from '@/utils/request'
import type { AxiosPromise } from 'axios'

$blankline
export type {{=className}} = {
{{~it.columns:column:index}}
  {{=column.columnName}}: {{=column.columnType}}
{{~}}
  formType: string
}
export type Create{{=className}}Dto = Omit<{{=className}}, 'id'>
export type Update{{=className}}Dto = Partial<{{=className}}>
export type Search{{=className}}DtoWithNotPage = Partial<Pick<{{=className}}, {{~formColumns:column:i}}'{{=column}}'{{? i < formColumns.length - 1 }} | {{?}}{{~}}>>
export type Search{{=className}}Dto = Search{{=className}}DtoWithNotPage & PageParams
$blankline
export function query(params: Search{{=className}}Dto): AxiosPromise<ResponseBodyType<PageInfo<{{=className}}[]>>> {
  return request({
    url: '/{{=it.tableName}}/query',
    method: 'get',
    params,
  })
}
$blankline
export function create(data: Create{{=className}}Dto): AxiosPromise<ResponseBodyType<void>> {
  return request({
    url: '/{{=it.tableName}}',
    method: 'post',
    data,
  })
}
$blankline
export function findAll(): AxiosPromise<ResponseBodyType<{{=className}}[]>> {
  return request({
    url: '/{{=it.tableName}}',
    method: 'get',
  })
}
{{? isTree }}
$blankline
export function tree(params: Search{{=className}}DtoWithNotPage): AxiosPromise<ResponseBodyType<{{=className}}[]>> {
  return request({
    url: '/{{=it.tableName}}/tree',
    method: 'get',
    params,
  })
}
{{?}}
$blankline
export function findOne(id: number): AxiosPromise<ResponseBodyType<{{=className}}>> {
  return request({
    url: '/{{=it.tableName}}/' + id,
    method: 'get',
  })
}
$blankline
export function update(data: Update{{=className}}Dto): AxiosPromise<ResponseBodyType<{{=className}}>> {
  return request({
    url: '/{{=it.tableName}}/' + data.id,
    method: 'patch',
    data,
  })
}
$blankline
export function remove(id: number | string): AxiosPromise<ResponseBodyType<void>> {
  return request({
    url: '/{{=it.tableName}}/' + id,
    method: 'delete',
  })
}
$blankline